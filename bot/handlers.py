import logging

logger = logging.getLogger(__name__)
from collections import defaultdict
from datetime import date, timedelta

import imagehash
from aiogram import types, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, InputMediaPhoto
from sqlalchemy.orm import joinedload

import shared_state
from database.models import Session, Business, AdCreative
from facebook.scraper import scrape_all
from bot.keyboards import get_main_menu_keyboard
from bot.states import ReportState, ReportAllState

router = Router()


@router.message(Command("add_business"))
async def add_business_command(message: types.Message, command: CommandObject):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –±—ñ–∑–Ω–µ—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.
    –§–æ—Ä–º–∞—Ç: /add_business <ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏> <–ù–∞–∑–≤–∞ –±—ñ–∑–Ω–µ—Å—É>
    """
    if not command.args:
        await message.answer(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –Ω–∞–∑–≤—É –±—ñ–∑–Ω–µ—Å—É.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: `/add_business 1234567890 Nike`"
        )
        return

    # –ü–æ–¥—ñ–ª id —ñ –Ω–∞–∑–≤–∏
    args = command.args.split(maxsplit=1)
    if len(args) != 2:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/add_business <ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏> <–ù–∞–∑–≤–∞ –±—ñ–∑–Ω–µ—Å—É>`"
        )
        return

    fb_page_id, business_name = args

    session = Session()
    try:
        # —Ç–µ—Å—Ç —á–∏ —î —Ç–∞–∫–∏–π –±—ñ–∑–Ω–µ—Å
        existing_business = session.query(Business).filter_by(fb_page_id=fb_page_id).first()
        if existing_business:
            await message.answer(f"‚ö†Ô∏è –ë—ñ–∑–Ω–µ—Å '{existing_business.name}' –∑ ID `{fb_page_id}` –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ.")
            return

        # –∫–æ–º—ñ—Ç –±—ñ–∑–Ω–µ—Å—É
        new_business = Business(name=business_name, fb_page_id=fb_page_id)
        session.add(new_business)
        session.commit()

        await message.answer(f"‚úÖ –ë—ñ–∑–Ω–µ—Å '{business_name}' –∑ ID `{fb_page_id}` —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É!")
        logger.info(f"–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –±—ñ–∑–Ω–µ—Å: {business_name} ({fb_page_id})")

    except Exception as e:
        session.rollback()
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å—É: {e}")
    finally:
        session.close()


@router.message(Command("delete_business"))
async def delete_business_command(message: types.Message, command: CommandObject):
    """
    –í–∏–¥–∞–ª—è—î –±—ñ–∑–Ω–µ—Å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –π–æ–≥–æ ID.
    –§–æ—Ä–º–∞—Ç: /delete_business <ID>
    """
    if not command.args or not command.args.strip().isdigit():
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –±—ñ–∑–Ω–µ—Å—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.\n–ü—Ä–∏–∫–ª–∞–¥: /delete_business 2")
        return

    business_id = int(command.args.strip())
    session = Session()
    try:
        business = session.query(Business).filter_by(fb_page_id=str(business_id)).first()
        if not business:
            await message.answer(f"‚ö†Ô∏è –ë—ñ–∑–Ω–µ—Å –∑ ID `{business_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        session.delete(business)
        session.commit()
        await message.answer(f"‚úÖ –ë—ñ–∑–Ω–µ—Å '{business.name}' (ID: {business_id}) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –±—ñ–∑–Ω–µ—Å: {business.name} (ID: {business_id})")
    except Exception as e:
        session.rollback()
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –±—ñ–∑–Ω–µ—Å—É: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å—É: {e}")
    finally:
        session.close()

@router.message(Command('start'))
async def start_handler(msg: types.Message):
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç—É
    """
    keyboard = get_main_menu_keyboard()
    await msg.answer(
        'üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é:',
        reply_markup=keyboard
    )


@router.message(Command('businesses'))
async def list_businesses(msg: types.Message):
    session = Session()
    businesses = session.query(Business).all()
    text = '\n'.join([f"{b.id}. {b.name}" for b in businesses])
    await msg.answer(f"üìä –ú–æ–Ω—ñ—Ç–æ—Ä—è—Ç—å—Å—è —Ç–∞–∫—ñ –±—ñ–∑–Ω–µ—Å–∏:\n{text}")
    session.close()

# --- –¢–†–ï–ë–ê –§–Ü–ö–°–ê–ù–£–¢–ò ---
# @router.message(F.text.in_({"‚è≥ –î–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏", "/long"}))
# async def long_ads(msg: types.Message):
#     """
#     –ü–æ–∫–∞–∑—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏, —â–æ –∞–∫—Ç–∏–≤–Ω—ñ 10+ –¥–Ω—ñ–≤,
#     –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å—Ö–æ–∂–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å.
#     """
#     await msg.answer("‚è≥ –®—É–∫–∞—é –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏...")
#
#     session = Session()
#     ads = session.query(AdCreative).options(joinedload(AdCreative.business)).filter(
#         AdCreative.duration_days >= 10,
#         AdCreative.is_active == True
#     ).order_by(AdCreative.start_date.desc()).all()
#     session.close()
#
#     if not ads:
#         await msg.answer("üìä –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å 10 –∞–±–æ –±—ñ–ª—å—à–µ –¥–Ω—ñ–≤.")
#         return
#
#     HAMMING_DISTANCE_THRESHOLD = 14 #–ø–æ —Ç–µ—Å—Ç–∞–º 14 –Ω–∞–π–∫—Ä–∞—â–µ –≤—ñ–¥—Å—ñ—é—î —Å—Ö–æ–∂—ñ
#     unique_ads = []
#     processed_hashes = []
#
#     for ad in ads:
#         if not ad.image_hash or not ad.local_path:
#             continue
#         try:
#             current_hash = imagehash.hex_to_hash(ad.image_hash)
#             is_duplicate = False
#             for existing_hash_str in processed_hashes:
#                 existing_hash = imagehash.hex_to_hash(existing_hash_str)
#                 if current_hash - existing_hash <= HAMMING_DISTANCE_THRESHOLD:
#                     is_duplicate = True
#                     break
#             if not is_duplicate:
#                 unique_ads.append(ad)
#                 processed_hashes.append(ad.image_hash)
#         except Exception as e:
#             print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ö–µ—à—É –¥–ª—è /long ad_id {ad.id}: {e}")
#
#     if not unique_ads:
#         await msg.answer("üìä –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤.")
#         return
#
#     await msg.answer(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(unique_ads)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å 10+ –¥–Ω—ñ–≤:")
#     for ad in unique_ads:
#         caption = (f"<b>{ad.business.name}</b>\n"
#                    f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {ad.duration_days} –¥–Ω.\n"
#                    f"–°—Ö–æ–∂–∏—Ö –≤–∞—Ä—ñ–∞—Ü—ñ–π (–∑–∞ –¥–∞–Ω–∏–º–∏ FB): {ad.similar_ads_count}")
#         try:
#             await msg.answer_photo(FSInputFile(ad.local_path), caption=caption, parse_mode="HTML")
#         except Exception as e:
#             print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è /long: {e}")
#             await msg.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è ID: {ad.fb_ad_id}")


@router.message(F.text.in_({"üìä –ó–≤—ñ—Ç –ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö", "/report"}))
async def report_start(message: types.Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É, –ø–∏—Ç–∞—î –ø—Ä–æ –ø–µ—Ä—ñ–æ–¥."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="report_period_today")],
        [InlineKeyboardButton(text="üîµ –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="report_period_week")],
        [InlineKeyboardButton(text="üü£ –¶–µ–π –º—ñ—Å—è—Ü—å", callback_data="report_period_month")],
        [InlineKeyboardButton(text="‚ö´Ô∏è –ó–∞ –≤–µ—Å—å —á–∞—Å", callback_data="report_period_all")],
    ])
    await message.answer("üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É:", reply_markup=keyboard)
    await state.set_state(ReportState.waiting_for_period)


@router.callback_query(ReportState.waiting_for_period)
async def period_chosen(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É, –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ —ñ –ø–∏—Ç–∞—î –ø—Ä–æ –±—ñ–∑–Ω–µ—Å."""
    await call.answer()
    period = call.data.split('_')[-1]
    await state.update_data(period=period)

    session = Session()
    businesses = session.query(Business).all()
    session.close()

    buttons = [[InlineKeyboardButton(text=b.name, callback_data=f"report_biz_{b.id}")] for b in businesses]
    buttons.append([InlineKeyboardButton(text="üìà –í—Å—ñ –±—ñ–∑–Ω–µ—Å–∏", callback_data="report_biz_all")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text("üè¢ –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –±—ñ–∑–Ω–µ—Å:", reply_markup=keyboard)
    await state.set_state(ReportState.waiting_for_business)


@router.callback_query(ReportState.waiting_for_business)
async def business_chosen(call: types.CallbackQuery, state: FSMContext):
    """
    –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫. –§–æ—Ä–º—É—î –∑–≤—ñ—Ç, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—é—á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    —Å—Ö–æ–∂–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤ —É –≤–∏–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ.
    """
    await call.answer()
    await call.message.edit_text("‚è≥ –ì–æ—Ç—É—é –∑–≤—ñ—Ç, –∞–Ω–∞–ª—ñ–∑—É—é —Ç–∞ –≥—Ä—É–ø—É—é –∫—Ä–µ–∞—Ç–∏–≤–∏...")

    user_data = await state.get_data()
    period = user_data['period']
    business_id_str = call.data.split('_')[-1]

    # --- 1. –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ –ë–î ---
    session = Session()
    query = session.query(AdCreative).options(joinedload(AdCreative.business))

    if period != 'all':
        query = query.filter(AdCreative.is_active == True)

    today = date.today()
    if period == 'today':
        query = query.filter(AdCreative.start_date == today)
        period_str = f"–∑–∞ {today.strftime('%d.%m.%Y')}"
    elif period == 'week':
        start_date = today - timedelta(days=7)
        query = query.filter(AdCreative.start_date >= start_date)
        period_str = f"–∑ {start_date.strftime('%d.%m')} –ø–æ {today.strftime('%d.%m')}"
    elif period == 'month':
        start_date = today - timedelta(days=30)
        query = query.filter(AdCreative.start_date >= start_date)
        period_str = f"–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
    else:
        period_str = "–∑–∞ –≤–µ—Å—å —á–∞—Å"

    business_name = "–í—Å—ñ –±—ñ–∑–Ω–µ—Å–∏"
    if business_id_str != 'all':
        business_id = int(business_id_str)
        query = query.filter(AdCreative.business_id == business_id)
        business = session.query(Business).filter_by(id=business_id).first()
        if business:
            business_name = business.name

    ads = query.order_by(AdCreative.start_date.desc()).all()
    session.close()

    if not ads:
        await call.message.edit_text("ü§∑‚Äç‚ôÇÔ∏è –ó–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    # --- 2. –î–ò–ù–ê–ú–Ü–ß–ù–ï –ì–†–£–ü–£–í–ê–ù–ù–Ø –ó–ê –•–ï–®–ï–ú ---
    HAMMING_DISTANCE_THRESHOLD = 14
    hash_groups = []

    for ad in ads:
        if not ad.image_hash or not ad.local_path:
            continue

        try:
            current_hash = imagehash.hex_to_hash(ad.image_hash)
            found_group = False
            for group in hash_groups:
                representative_hash = imagehash.hex_to_hash(group[0].image_hash)
                if current_hash - representative_hash <= HAMMING_DISTANCE_THRESHOLD:
                    group.append(ad)
                    found_group = True
                    break
            if not found_group:
                hash_groups.append([ad])
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ö–µ—à—É –¥–ª—è ad_id {ad.id}: {e}")

    if not hash_groups:
        await call.message.edit_text("ü§∑‚Äç‚ôÇÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—Ä–µ–∞—Ç–∏–≤–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        await state.clear()
        return

    # --- 3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ –≥—Ä—É–ø–∏ –∑–∞ —ó—Ö–Ω—ñ–º —Ä–æ–∑–º—ñ—Ä–æ–º ---
    top_performers = []  # 5+ –∫–æ–ø—ñ–π
    mid_performers = []  # 2-4 –∫–æ–ø—ñ—ó
    single_creatives = []  # 1 –∫–æ–ø—ñ—è

    for group in hash_groups:
        group_size = len(group)
        representative_ad = group[0]
        item_to_categorize = (representative_ad, group_size)

        if group_size >= 5:
            top_performers.append(item_to_categorize)
        elif 2 <= group_size <= 4:
            mid_performers.append(item_to_categorize)
        else:
            single_creatives.append(item_to_categorize)

    # --- 4. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–≤—ñ—Ç ---
    await call.message.delete()
    await call.message.answer(f"<b>–ó–≤—ñ—Ç –¥–ª—è: {business_name}</b> ({period_str})", parse_mode="HTML")

    await send_ads_category(
        call.message, top_performers,
        f"<b>üî• –ö—Ä–µ–∞—Ç–∏–≤–∏-–ª—ñ–¥–µ—Ä–∏ ({len(top_performers)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö, 5+ –≤–∞—Ä—ñ–∞—Ü—ñ–π)</b>"
    )
    await send_ads_category(
        call.message, mid_performers,
        f"<b>üí™ –°—Ç–∞–±—ñ–ª—å–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏ ({len(mid_performers)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö, 2-4 –≤–∞—Ä—ñ–∞—Ü—ñ—ó)</b>"
    )
    await send_ads_category(
        call.message, single_creatives,
        f"<b>ü§î –û–¥–∏–Ω–∏—á–Ω—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏/—Ç–µ—Å—Ç–∏ ({len(single_creatives)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö)</b>"
    )

    await call.message.answer("‚úÖ –ó–≤—ñ—Ç –≥–æ—Ç–æ–≤–∏–π!")
    await state.clear()

@router.message(F.text.in_({"‚öôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∞–ø—ñ–Ω–≥", "/scrape"}))
async def manual_scrape_command(message: types.Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—É —Å–∫—Ä–∞–ø—ñ–Ω–≥—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å—Ç–∞–Ω—É.
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –π–¥–µ –≤–∂–µ —Å–∫—Ä–∞–ø—ñ–Ω–≥
    if shared_state.is_scraping:
        await message.answer("‚è≥ –ü—Ä–æ—Ü–µ—Å —Å–∫—Ä–∞–ø—ñ–Ω–≥—É –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return

    await message.answer("‚öôÔ∏è –ü–æ—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å —Å–∫—Ä–∞–ø—ñ–Ω–≥—É... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.")

    try:
        await scrape_all()
        await message.answer("‚úÖ –°–∫—Ä–∞–ø—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä—É—á–Ω–æ–≥–æ —Å–∫—Ä–∞–ø—ñ–Ω–≥—É: {e}")
        await message.answer(f"‚ùå –ü—ñ–¥ —á–∞—Å —Å–∫—Ä–∞–ø—ñ–Ω–≥—É —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.\n–î–µ—Ç–∞–ª—ñ: {e}")


@router.message(F.text.in_({"üóÇÔ∏è –ó–≤—ñ—Ç –ø–æ –≤—Å—ñ—Ö", "/reportall"}))
async def report_all_start(message: types.Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∑–≤—ñ—Ç—É, –ø–∏—Ç–∞—î –ø—Ä–æ –ø–µ—Ä—ñ–æ–¥."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="reportall_period_today")],
        [InlineKeyboardButton(text="üîµ –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="reportall_period_week")],
        [InlineKeyboardButton(text="üü£ –¶–µ–π –º—ñ—Å—è—Ü—å", callback_data="reportall_period_month")],
        [InlineKeyboardButton(text="‚ö´Ô∏è –ó–∞ –≤–µ—Å—å —á–∞—Å", callback_data="reportall_period_all")],
    ])
    await message.answer("üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è **–ø–æ–≤–Ω–æ–≥–æ** –∑–≤—ñ—Ç—É (–∑ —É—Å—ñ–º–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏):", reply_markup=keyboard)
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
    await state.set_state(ReportAllState.waiting_for_period)


@router.callback_query(ReportAllState.waiting_for_period)
async def period_chosen_all(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–≤—ñ—Ç—É."""
    await call.answer()
    period = call.data.split('_')[-1]
    await state.update_data(period=period)

    session = Session()
    businesses = session.query(Business).all()
    session.close()

    buttons = [[InlineKeyboardButton(text=b.name, callback_data=f"reportall_biz_{b.id}")] for b in businesses]
    buttons.append([InlineKeyboardButton(text="üìà –í—Å—ñ –±—ñ–∑–Ω–µ—Å–∏", callback_data="reportall_biz_all")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text("üè¢ –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –±—ñ–∑–Ω–µ—Å:", reply_markup=keyboard)
    await state.set_state(ReportAllState.waiting_for_business)


@router.callback_query(ReportAllState.waiting_for_business)
async def business_chosen_all(call: types.CallbackQuery, state: FSMContext):
    """–§—ñ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫. –§–æ—Ä–º—É—î —ñ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –ë–ï–ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ —Ö–µ—à—É."""

    await call.answer() # –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—É –¥–æ–¥–∞–Ω–æ, –∞–ª–µ –≤—Å–µ–æ–¥–Ω–æ –ø—Ä–∏–ª—ñ—Ç–∞–∂ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–æ —Ñ–ª—É–¥

    await call.message.edit_text("‚è≥ –ì–æ—Ç—É—é **–ø–æ–≤–Ω–∏–π** –∑–≤—ñ—Ç...")

    user_data = await state.get_data()
    period = user_data['period']
    business_id = call.data.split('_')[-1]

    session = Session()
    query = session.query(AdCreative).options(joinedload(AdCreative.business))

    if period != 'all':
        query = query.filter(AdCreative.is_active == True)

    today = date.today()
    if period == 'today':
        start_date = today
        query = query.filter(AdCreative.start_date == start_date)
        period_str = f"–∑–∞ {today.strftime('%d.%m.%Y')}"
    elif period == 'week':
        start_date = today - timedelta(days=7)
        query = query.filter(AdCreative.start_date >= start_date)
        period_str = f"–∑ {start_date.strftime('%d.%m')} –ø–æ {today.strftime('%d.%m')}"
    elif period == 'month':
        start_date = today - timedelta(days=30)
        query = query.filter(AdCreative.start_date >= start_date)
        period_str = f"–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
    else:
        period_str = "–∑–∞ –≤–µ—Å—å —á–∞—Å"

    if business_id != 'all':
        query = query.filter(AdCreative.business_id == int(business_id))

    ads = query.order_by(AdCreative.business_id, AdCreative.start_date.desc()).all()
    session.close()

    if not ads:
        await call.message.edit_text("ü§∑‚Äç‚ôÇÔ∏è –ó–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    ads_by_business = defaultdict(list)
    for ad in ads:
        ads_by_business[ad.business].append(ad)

    await call.message.delete()

    for business, business_ads in ads_by_business.items():
        header_text = (f"<b>{business.name}</b>\n"
                       f"–í—Å—ñ –∫—Ä–µ–∞—Ç–∏–≤–∏ {period_str} (–∑–Ω–∞–π–¥–µ–Ω–æ: {len(business_ads)}):")
        await call.message.answer(header_text, parse_mode="HTML")

        media_group = []
        for ad in business_ads:
            if ad.local_path:
                try:
                    media_group.append(InputMediaPhoto(media=FSInputFile(ad.local_path)))
                    if len(media_group) == 10:
                        await call.message.answer_media_group(media_group)
                        media_group = []
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø—É: {e}")

        if media_group:
            await call.message.answer_media_group(media_group)

    await call.message.answer("‚úÖ –ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –≥–æ—Ç–æ–≤–∏–π!")
    await state.clear()


async def send_ads_category(message: types.Message, ads_with_counts: list, header: str):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω—å.
    –ü—Ä–∏–π–º–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ö–æ–∂–∏—Ö).
    """
    if not ads_with_counts:
        return

    sorted_ads = sorted(ads_with_counts, key=lambda item: item[1], reverse=True)

    await message.answer(header, parse_mode="HTML")
    for ad, count in sorted_ads:
        if ad.local_path:
            caption = (f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ö–æ–∂–∏—Ö —É —Ü—å–æ–º—É –∑–≤—ñ—Ç—ñ: <b>{count}</b>\n"
                       f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {ad.duration_days} –¥–Ω.")
            try:
                await message.answer_photo(FSInputFile(ad.local_path), caption=caption, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {ad.id}: {e}")